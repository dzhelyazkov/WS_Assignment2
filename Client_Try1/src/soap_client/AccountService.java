
package soap_client;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AccountService", targetNamespace = "http://service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AccountService {


    /**
     * 
     * @param arg0
     * @return
     *     returns soap_client.Account
     * @throws InvalidAccountParameterFault
     * @throws AccountNameExistsFault
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "register", targetNamespace = "http://service/", className = "soap_client.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://service/", className = "soap_client.RegisterResponse")
    @Action(input = "http://service/AccountService/registerRequest", output = "http://service/AccountService/registerResponse", fault = {
        @FaultAction(className = InvalidAccountParameterFault.class, value = "http://service/AccountService/register/Fault/InvalidAccountParameterException"),
        @FaultAction(className = AccountNameExistsFault.class, value = "http://service/AccountService/register/Fault/AccountNameExistsException")
    })
    public Account register(
        @WebParam(name = "arg0", targetNamespace = "")
        Account arg0)
        throws AccountNameExistsFault, InvalidAccountParameterFault
    ;

    /**
     * 
     * @param arg0
     * @throws AccountDoesNotExistFault
     */
    @WebMethod
    @RequestWrapper(localName = "delete", targetNamespace = "http://service/", className = "soap_client.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://service/", className = "soap_client.DeleteResponse")
    @Action(input = "http://service/AccountService/deleteRequest", output = "http://service/AccountService/deleteResponse", fault = {
        @FaultAction(className = AccountDoesNotExistFault.class, value = "http://service/AccountService/delete/Fault/AccountDoesNotExistException")
    })
    public void delete(
        @WebParam(name = "arg0", targetNamespace = "")
        Account arg0)
        throws AccountDoesNotExistFault
    ;

    /**
     * 
     * @param arg0
     * @throws InvalidAccountParameterFault
     * @throws AccountDoesNotExistFault
     * @throws AccountNameExistsFault
     */
    @WebMethod
    @RequestWrapper(localName = "save", targetNamespace = "http://service/", className = "soap_client.Save")
    @ResponseWrapper(localName = "saveResponse", targetNamespace = "http://service/", className = "soap_client.SaveResponse")
    @Action(input = "http://service/AccountService/saveRequest", output = "http://service/AccountService/saveResponse", fault = {
        @FaultAction(className = InvalidAccountParameterFault.class, value = "http://service/AccountService/save/Fault/InvalidAccountParameterException"),
        @FaultAction(className = AccountNameExistsFault.class, value = "http://service/AccountService/save/Fault/AccountNameExistsException"),
        @FaultAction(className = AccountDoesNotExistFault.class, value = "http://service/AccountService/save/Fault/AccountDoesNotExistException")
    })
    public void save(
        @WebParam(name = "arg0", targetNamespace = "")
        Account arg0)
        throws AccountDoesNotExistFault, AccountNameExistsFault, InvalidAccountParameterFault
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns soap_client.Account
     * @throws AccountVerificationFault
     * @throws AccountDoesNotExistFault
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://service/", className = "soap_client.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://service/", className = "soap_client.LoginResponse")
    @Action(input = "http://service/AccountService/loginRequest", output = "http://service/AccountService/loginResponse", fault = {
        @FaultAction(className = AccountDoesNotExistFault.class, value = "http://service/AccountService/login/Fault/AccountDoesNotExistException"),
        @FaultAction(className = AccountVerificationFault.class, value = "http://service/AccountService/login/Fault/AccountVerificationException")
    })
    public Account login(
        @WebParam(name = "arg0", targetNamespace = "")
        Account arg0)
        throws AccountDoesNotExistFault, AccountVerificationFault
    ;

}
